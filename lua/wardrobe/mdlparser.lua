local print = wardrobe and wardrobe.dbg or print

mdlparser = mdlparser or {}
mdlparser.cache = mdlparser.cache or {}

mdlparser.parser = {}
local parserObj = mdlparser.parser

MDL_NOTMDL        = 1
MDL_NEWFORMAT     = 2
MDL_NOFILE        = 3
MDL_WRONGVER      = 4
MDL_INVALID       = 5
MDL_NOBONES       = 6
MDL_NOATTCH       = 7
MDL_NOANIMS       = 8

mdlparser.reverseEnum = {
	[-1] = "MDL_UNKNOWN",
	"MDL_NOTMDL",
	"MDL_NEWFORMAT",
	"MDL_NOFILE",
	"MDL_WRONGVER",
	"MDL_INVALID",
	"MDL_NOBONES",
	"MDL_NOATTCH",
	"MDL_NOANIMS",
}

mdlparser.flags = {
	[0] = "AUTOGENERATED_HITBOX",
	"USES_ENV_CUBEMAP",
	"FORCE_OPAQUE",
	"TRANSLUCENT_TWOPASS",
	"STATIC_PROP",
	"USES_FB_TEXTURE",
	"HASSHADOWLOD",
	"USES_BUMPMAPPING",
	"USE_SHADOWLOD_MATERIALS",
	"OBSOLETE",
	"UNUSED",
	"NO_FORCED_FADE",
	"FORCE_PHONEME_CROSSFADE",
	"CONSTANT_DIRECTIONAL_LIGHT_DOT",
	"FLEXES_CONVERTED",
	"BUILT_IN_PREVIEW_MODE",
	"AMBIENT_BOOST",
	"DO_NOT_CAST_SHADOWS",
	"CAST_TEXTURE_SHADOWS",
}

mdlparser.pmAttaches = {
	eyes = true,
	mouth = true,
	anim_attachment_head = true,
	anim_attachment_RH = true,
	anim_attachment_LH = true,
}

mdlparser.pmAnims = {
	["@ragdoll"] = true,
	["a_proportions"] = true,
}

local function stringByteToNumber(s)
	return
		string.byte(s, 1) +
		bit.lshift(string.byte(s, 2), 8 ) +
		bit.lshift(string.byte(s, 3), 16) +
		bit.lshift(string.byte(s, 4), 24)
end

local function sbyte(s)
	local n = stringByteToNumber(s)
	if n >= 2^(4 * 8 - 1) then
		return n - 2^(4 * 8)
	end

	return n
end

local function readString(f)
	local str = ""
	while f:Tell() < f:Size() do
		local b = f:ReadByte()
		if b == 0 then break end

		str = str .. string.char(b)
	end

	return str
end

local meta = {
	__index = mdlparser.parser,
	__tostring = function(s)
		return string.format("mdlparser: %s", s.address)
	end
}

function parserObj:terminate()
	self.file:Close()
	self.file = nil
	mdlparser.cache[self.path] = nil
end

function parserObj:isValid()
	return self.file and self.parsed
end

function parserObj:parse(force)
	if self.parsed and not force then return end

	local f = self.file
	f:Seek(8) -- Identity + version

	self.checksum = f:Read(4)

	self.name = f:Read(64)
		self.name = self.name:match("^[^%z]*") or ""
	self.dataLength = sbyte(f:Read(4))

	self.eyeposition = Vector(sbyte(f:Read(4)), sbyte(f:Read(4)), sbyte(f:Read(4)))
	self.illumposition = Vector(sbyte(f:Read(4)), sbyte(f:Read(4)), sbyte(f:Read(4)))
	self.hull_min = Vector(sbyte(f:Read(4)), sbyte(f:Read(4)), sbyte(f:Read(4)))
	self.hull_max = Vector(sbyte(f:Read(4)), sbyte(f:Read(4)), sbyte(f:Read(4)))
	self.view_bbmin = Vector(sbyte(f:Read(4)), sbyte(f:Read(4)), sbyte(f:Read(4)))
	self.view_bbmax = Vector(sbyte(f:Read(4)), sbyte(f:Read(4)), sbyte(f:Read(4)))

	self.flags = sbyte(f:Read(4))

	self.bone_count = sbyte(f:Read(4))
	self.bone_offset = sbyte(f:Read(4))

	self.bonecontroller_count = sbyte(f:Read(4))
	self.bonecontroller_offset = sbyte(f:Read(4))

	self.hitbox_count = sbyte(f:Read(4))
	self.hitbox_offset = sbyte(f:Read(4))

	self.localanim_count = sbyte(f:Read(4))
	self.localanim_offset = sbyte(f:Read(4))

	self.localseq_count = sbyte(f:Read(4))
	self.localseq_offset = sbyte(f:Read(4))

	self.activitylistversion = sbyte(f:Read(4))
	self.eventsindexed = sbyte(f:Read(4))

	self.texture_count = sbyte(f:Read(4))
	self.texture_offset = sbyte(f:Read(4))

	self.texturedir_count = sbyte(f:Read(4))
	self.texturedir_offset = sbyte(f:Read(4))

	self.skinreference_count = sbyte(f:Read(4))
	self.skinrfamily_count = sbyte(f:Read(4))
	self.skinreference_index = sbyte(f:Read(4))

	self.bodypart_count = sbyte(f:Read(4))
	self.bodypart_offset = sbyte(f:Read(4))

	self.attachment_count = sbyte(f:Read(4))
	self.attachment_offset = sbyte(f:Read(4))

	self.localnode_count = sbyte(f:Read(4))
	self.localnode_index = sbyte(f:Read(4))
	self.localnode_name_index = sbyte(f:Read(4))

	self.flexdesc_count = sbyte(f:Read(4))
	self.flexdesc_index = sbyte(f:Read(4))

	self.flexcontroller_count = sbyte(f:Read(4))
	self.flexcontroller_index = sbyte(f:Read(4))

	self.flexrules_count = sbyte(f:Read(4))
	self.flexrules_index = sbyte(f:Read(4))

	self.ikchain_count = sbyte(f:Read(4))
	self.ikchain_index = sbyte(f:Read(4))

	self.mouths_count = sbyte(f:Read(4))
	self.mouths_index = sbyte(f:Read(4))

	self.localposeparam_count = sbyte(f:Read(4))
	self.localposeparam_index = sbyte(f:Read(4))

	self.surfaceprop_index = sbyte(f:Read(4))

	self.keyvalue_index = sbyte(f:Read(4))
	self.keyvalue_count = sbyte(f:Read(4))

	self.iklock_count = sbyte(f:Read(4))
	self.iklock_index = sbyte(f:Read(4))

	self.mass = f:ReadFloat()
	self.contents = sbyte(f:Read(4))

	self.includemodel_count = sbyte(f:Read(4))
	self.includemodel_index = sbyte(f:Read(4))

	self.virtualModel = sbyte(f:Read(4))

	self.animblocks_name_index = sbyte(f:Read(4))
	self.animblocks_count = sbyte(f:Read(4))
	self.animblocks_index = sbyte(f:Read(4))

	self.animblockModel = sbyte(f:Read(4))

	self.bonetablename_index = sbyte(f:Read(4))

	self.vertex_base = sbyte(f:Read(4))
	self.offset_base = sbyte(f:Read(4))

	self.directionaldotproduct = f:ReadByte()

	self.rootLod = f:ReadByte()
	self.numAllowedRootLods = f:ReadByte()

	self.unused1 = f:ReadByte()
	self.unused2 = sbyte(f:Read(4))

	self.flexcontrollerui_count = sbyte(f:Read(4))
	self.flexcontrollerui_index = sbyte(f:Read(4))

	self.studiohdr2index = sbyte(f:Read(4))
	self.unused3 = sbyte(f:Read(4))

	self.parsed = true
end

function parserObj:isValid()
	return self.file and self.parsed
end

local matrix3x4_t = (3 * 4) * 4

local msAttachmentSize =
	  4             -- int           sznameindex
	+ 4             -- unsigned int  flags
	+ 4             -- int           localbone
	+ matrix3x4_t   -- matrix3x4_t   local
	+ 4 * 8         -- int           unused[8]

function parserObj:offsetAttachment(i)
	return self.attachment_offset + msAttachmentSize * i
end

function parserObj:getAttachments()
	local f = self.file
	local t = self.attachment_list

	if t then return t end
	t = {}

	for i = 0, self.attachment_count - 1 do
		local off = self:offsetAttachment(i)
		f:Seek(off)

		local r = {}

		r.sznameindex = sbyte(f:Read(4))
		r.flags = stringByteToNumber(f:Read(4))
		r.localbone = sbyte(f:Read(4))
		r._local = f:Read(matrix3x4_t)

		f:Seek(off + r.sznameindex)
		r.name = readString(f)

		t[#t + 1] = r
	end

	self.attachment_list = t -- cache

	return t
end

local msAnimdescSize =
	  4     -- int    baseptr
	+ 4     -- int    sznameindex
	+ 4     -- float  fps
	+ 4     -- int    flags
	+ 4     -- int    numframes
	+ 4     -- int    nummovements
	+ 4     -- int    movementindex
	+ 4 * 6 -- int    unused1[6]
	+ 4     -- int    animblock
	+ 4     -- int    animindex
	+ 4     -- int    numikrules
	+ 4     -- int    ikruleindex
	+ 4     -- int    animblockikruleindex
	+ 4     -- int    numlocalhierarchy
	+ 4     -- int    localhierarchyindex
	+ 4     -- int    sectionindex
	+ 4     -- int    sectionframes
	+ 2     -- short  zeroframespan
	+ 2     -- short  zeroframecount
	+ 4     -- int    zeroframeindex
	+ 4     -- float  zeroframestalltime

function parserObj:offsetAnimdesc(i)
	return self.localanim_offset + msAnimdescSize * i
end

function parserObj:getAnimdescs()
	local f = self.file
	local t = self.localanim_list

	if t then return t end
	t = {}

	for i = 0, self.localanim_count - 1 do
		local off = self:offsetAnimdesc(i)
		f:Seek(off)

		local r = {}

		r.baseptr = sbyte(f:Read(4))
		r.sznameindex = sbyte(f:Read(4))
		r.flags = stringByteToNumber(f:Read(4))

		f:Seek(off + r.sznameindex)
		r.name = readString(f)

		t[#t + 1] = r
	end

	self.localanim_list = t -- cache

	return t
end

local msBodypartSize =
	  4     -- int  sznameindex
	+ 4     -- int  nummodels
	+ 4     -- int  base
	+ 4     -- int  modelindex

function parserObj:offsetBodypart(i)
	return self.bodypart_offset + msBodypartSize * i
end

function parserObj:getBodyparts()
	local f = self.file
	local t = self.bodypart_list

	if t then return t end
	t = {}

	for i = 0, self.bodypart_count - 1 do
		local off = self:offsetBodypart(i)
		f:Seek(off)

		local r = {}

		r.sznameindex = sbyte(f:Read(4))
		r.nummodels = sbyte(f:Read(4))
		r.base = sbyte(f:Read(4))
		r.modelindex = sbyte(f:Read(4))

		f:Seek(off + r.sznameindex)
		r.name = readString(f)

		t[#t + 1] = r
	end

	self.bodypart_list = t -- cache

	return t
end

function mdlparser.open(path)
	if mdlparser.cache[path] and mdlparser.cache[path]:isValid() then
		return mdlparser.cache[path]
	end

	local f = file.Open(path, "rb", "GAME")
	if not f then return nil, MDL_NOFILE end

	local identity = f:Read(4)
	if identity ~= "IDST" then
		return nil, MDL_NOTMDL
	end

	local version = string.byte(f:Read(4))
	if version > 49 then
		return nil, MDL_NEWFORMAT
	end

	local obj = {
		file = f,
		version = version,
		path = path,
	}
	obj.address = tostring(obj):gsub("table: ", "")

	mdlparser.cache[path] = setmetatable(obj, meta)
	return mdlparser.cache[path]
end

function mdlparser.isPlayerModel(f, sz)
	local mdl, err = mdlparser.open(f)
	if not mdl then
		return false, err
	end

	if mdl.version < 44 then
		return false, MDL_WRONGVER
	end

	pcall(mdl.parse, mdl)

	if not mdl:isValid() then
		return false, MDL_INVALID
	end

	if not mdl.bone_count or mdl.bone_count == 0 then
		return false, MDL_NOBONES
	end

	-- if not mdl.attachment_count or mdl.attachment_count == 0 then
	-- 	return false, MDL_NOATTCH
	-- end

	local att = mdl:getAttachments()
	local found
	for k, v in pairs(att) do
		local name = v.name

		if mdlparser.pmAttaches[name] then
			found = true
			break
		end
	end

	-- if not found then
	-- 	return false, MDL_NOATTCH
	-- end

	if not mdl.localanim_count or mdl.localanim_count == 0 then
		return false, MDL_NOANIMS
	end

	local anim = mdl:getAnimdescs()
	found = nil
	for k, v in pairs(anim) do
		local name = v.name

		if mdlparser.pmAnims[name] then
			found = true
			break
		end
	end

	if not found then
		return false, MDL_NOANIMS
	end

	return true
end

print("loaded mdl parser")
